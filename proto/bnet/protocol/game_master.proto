syntax = "proto2";
package bnet.protocol.game_master;
import "bnet/protocol_0.proto";
import "bnet/protocol/attribute.proto";
import "bnet/protocol/server_pool.proto";


message ConnectInfo {
	optional .bnet.protocol.EntityId member_id = 1;
	optional string host = 2;
	optional int32 port = 3;
	optional bytes token = 4;
	repeated .bnet.protocol.attribute.Attribute attribute = 5;
}

message FindGameResponse {
	optional fixed64 request_id = 1;
	optional fixed64 factory_id = 2;
	optional bool queued = 3;
}

message GameHandle {
	optional fixed64 factory_id = 1;
	optional .bnet.protocol.EntityId game_id = 2;
}

message ChangeGameRequest {
	optional .bnet.protocol.game_master.GameHandle game_handle = 1;
	optional bool open = 2;
	repeated .bnet.protocol.attribute.Attribute attribute = 3;
	optional bool replace = 4;
}

message GameEndedNotification {
	optional .bnet.protocol.game_master.GameHandle game_handle = 1;
	optional uint32 reason = 2;
}

message GameFoundNotification {
	optional fixed64 request_id = 1;
	optional uint32 error_code = 2;
	optional .bnet.protocol.game_master.GameHandle game_handle = 3;
	repeated .bnet.protocol.game_master.ConnectInfo connect_info = 4;
}

message GameProperties {
	repeated .bnet.protocol.attribute.Attribute creation_attributes = 1;
	optional .bnet.protocol.attribute.AttributeFilter filter = 2;
	optional bool create = 3;
	optional bool open = 4 [default = true];
	optional fixed32 program_id = 5;
}

message GameStatsBucket {
	optional float bucket_min = 1;
	optional float bucket_max = 2 [default = 4.294967E+09];
	optional uint32 wait_milliseconds = 3;
	optional uint32 games_per_hour = 4;
	optional uint32 active_games = 5;
	optional uint32 active_players = 6;
	optional uint32 forming_games = 7;
	optional uint32 waiting_players = 8;
	optional uint32 open_joinable_games = 9;
	optional uint32 players_in_open_joinable_games = 10;
	optional uint32 open_games_total = 11;
	optional uint32 players_in_open_games_total = 12;
}

message GameFactoryDescription {
	optional fixed64 id = 1;
	optional string name = 2;
	repeated .bnet.protocol.attribute.Attribute attribute = 3;
	repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 4;
	optional fixed64 unseeded_id = 5;
	optional bool allow_queueing = 6 [default = true];
}

message FactoryUpdateNotification {
	enum Operation {
		ADD = 1;
		REMOVE = 2;
		CHANGE = 3;
	}
	optional .bnet.protocol.game_master.FactoryUpdateNotification.Operation op = 1 [default = ADD];
	optional .bnet.protocol.game_master.GameFactoryDescription description = 2;
	optional fixed32 program_id = 3;
}

message GetFactoryInfoRequest {
	optional fixed64 factory_id = 1;
}

message GetFactoryInfoResponse {
	repeated .bnet.protocol.attribute.Attribute attribute = 1;
	repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 2;
}

message GetGameStatsRequest {
	optional fixed64 factory_id = 1;
	optional .bnet.protocol.attribute.AttributeFilter filter = 2;
}

message GetGameStatsResponse {
	repeated .bnet.protocol.game_master.GameStatsBucket stats_bucket = 1;
}

message JoinGameResponse {
	optional fixed64 request_id = 1;
	optional bool queued = 2;
	repeated .bnet.protocol.game_master.ConnectInfo connect_info = 3;
}

message ListFactoriesRequest {
	optional .bnet.protocol.attribute.AttributeFilter filter = 1;
	optional uint32 start_index = 2;
	optional uint32 max_results = 3 [default = 100];
}

message ListFactoriesResponse {
	repeated .bnet.protocol.game_master.GameFactoryDescription description = 1;
	optional uint32 total_results = 2;
}

message PlayerLeftNotification {
	optional .bnet.protocol.game_master.GameHandle game_handle = 1;
	optional .bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3 [default = 1];
}

message SubscribeRequest {
	optional uint64 object_id = 1;
}

message SubscribeResponse {
	optional uint64 subscription_id = 1;
}

message UnregisterServerRequest {
}

message UnregisterUtilitiesRequest {
}

message UnsubscribeRequest {
	optional uint64 subscription_id = 1;
}

message Player {
	optional .bnet.protocol.Identity identity = 1;
	repeated .bnet.protocol.attribute.Attribute attribute = 2;
}

message CancelGameEntryRequest {
	optional fixed64 request_id = 1;
	optional fixed64 factory_id = 2;
	repeated .bnet.protocol.game_master.Player player = 3;
}

message FindGameRequest {
	repeated .bnet.protocol.game_master.Player player = 1;
	optional fixed64 factory_id = 2;
	optional .bnet.protocol.game_master.GameProperties properties = 3;
	optional uint64 object_id = 4;
	optional fixed64 request_id = 5;
	optional bool advanced_notification = 6;
}

message JoinGameRequest {
	optional .bnet.protocol.game_master.GameHandle game_handle = 1;
	repeated .bnet.protocol.game_master.Player player = 2;
	optional bool advanced_notification = 3;
}

message RegisterServerRequest {
	repeated .bnet.protocol.attribute.Attribute attribute = 1;
	optional .bnet.protocol.server_pool.ServerState state = 2;
	optional fixed32 program_id = 3;
}

message RegisterUtilitiesRequest {
	repeated .bnet.protocol.attribute.Attribute attribute = 1;
	optional .bnet.protocol.server_pool.ServerState state = 2;
	optional fixed32 program_id = 3;
}

