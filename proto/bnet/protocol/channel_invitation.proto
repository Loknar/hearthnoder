syntax = "proto2";
package bnet.protocol.channel_invitation;
import "bnet/protocol_0.proto";
import "bnet/protocol/channel.proto";
import "bnet/protocol/invitation.proto";


message AcceptInvitationResponse {
	optional uint64 object_id = 1;
}

message HasRoomForInvitationRequest {
	optional uint32 service_type = 1;
	optional fixed32 program = 2;
	optional string channel_type = 3 [default = "default"];
}

message IncrementChannelCountResponse {
	repeated uint64 reservation_tokens = 1;
}

message AcceptInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.channel.MemberState member_state = 2;
	optional fixed64 invitation_id = 3;
	optional uint64 object_id = 4;
	optional .bnet.protocol.EntityId channel_id = 5;
	optional uint32 service_type = 6;
	optional bool local_subscriber = 7 [default = true];
}

message ChannelCount {
	optional .bnet.protocol.EntityId channel_id = 1;
	optional string channel_type = 2 [default = "default"];
}

message ChannelCountDescription {
	optional uint32 service_type = 1;
	optional fixed32 program = 2;
	optional string channel_type = 3 [default = "default"];
	optional .bnet.protocol.EntityId channel_id = 4;
}

message DecrementChannelCountRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.EntityId channel_id = 2;
	optional uint64 reservation_token = 3;
}

message IncrementChannelCountRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	repeated .bnet.protocol.channel_invitation.ChannelCountDescription descriptions = 2;
}

message ListChannelCountRequest {
	optional .bnet.protocol.EntityId member_id = 1;
	optional uint32 service_type = 2;
	optional fixed32 program = 3;
}

message ListChannelCountResponse {
	repeated .bnet.protocol.channel_invitation.ChannelCount channel = 1;
}

message RevokeInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.EntityId target_id = 2;
	optional fixed64 invitation_id = 3;
	optional .bnet.protocol.EntityId channel_id = 4;
}

message SubscribeRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional uint64 object_id = 2;
}

message UnsubscribeRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
}

message UpdateChannelCountRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional uint64 reservation_token = 2;
	optional .bnet.protocol.EntityId channel_id = 3;
}

message SuggestInvitationRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional .bnet.protocol.EntityId channel_id = 2;
	optional .bnet.protocol.EntityId target_id = 3;
	optional .bnet.protocol.EntityId approval_id = 4;
	optional .bnet.protocol.Identity agent_identity = 5;
	optional .bnet.protocol.AccountInfo agent_info = 6;
}

message ChannelInvitation {
	optional .bnet.protocol.channel.ChannelDescription channel_description = 1;
	optional bool reserved = 2;
	optional bool rejoin = 3;
	optional uint32 service_type = 4;
	extend .bnet.protocol.invitation.Invitation {
		optional bnet.protocol.channel_invitation.ChannelInvitation channel_invitation = 105;
	}
}

message InvitationAddedNotification {
	optional .bnet.protocol.invitation.Invitation invitation = 1;
}

message InvitationCollection {
	optional uint32 service_type = 1;
	optional uint32 max_received_invitations = 2;
	optional uint64 object_id = 3;
	repeated .bnet.protocol.invitation.Invitation received_invitation = 4;
}

message InvitationRemovedNotification {
	optional .bnet.protocol.invitation.Invitation invitation = 1;
	optional uint32 reason = 2;
}

message SubscribeResponse {
	repeated .bnet.protocol.channel_invitation.InvitationCollection collection = 1;
	repeated .bnet.protocol.invitation.Invitation received_invitation = 2;
}

message ChannelInvitationParams {
	optional .bnet.protocol.EntityId channel_id = 1;
	optional bool reserved = 2;
	optional bool rejoin = 3;
	optional uint32 service_type = 4;
	extend .bnet.protocol.invitation.InvitationParams {
		optional bnet.protocol.channel_invitation.ChannelInvitationParams channel_params = 105;
	}
}

message SuggestionAddedNotification {
	optional .bnet.protocol.invitation.Suggestion suggestion = 1;
}

